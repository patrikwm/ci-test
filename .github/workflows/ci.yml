---
name: CI Pipeline name

on:
  push:
    branches:
      - '**'
  pull_request:
    branches:
      - '**'

jobs:
  variable_test:
    name: Variable Test
    runs-on: ubuntu-latest

    env:
        VARIABLE_ONE: value_one
    steps:
      - uses: actions/checkout@v4

      - name: Echo variables
        run: |
            echo "NEW_VARIABLE=NEW_VARIABLE_VALUE" >> $GITHUB_ENV
            export PRIVATE_VARIABLE=PRIVATE_VARIABLE_VALUE

            # This works
            echo $VARIABLE_ONE 

            # This does not work
            echo "NEW_VARIABLE: $NEW_VARIABLE"
            echo "env.NEW_VARIABLE: ${{ env.NEW_VARIABLE }}"
            
            # This works
            echo $PRIVATE_VARIABLE 
            cat source_code.txt

      - name: Echo previous variables
        run: |
            echo "env.NEW_VARIABLE: ${{ env.NEW_VARIABLE }}"
            echo "VARIABLE_ONE: $VARIABLE_ONE"
            echo "NEW_VARIABLE: $NEW_VARIABLE"
            echo "PRIVATE_VARIABLE: $PRIVATE_VARIABLE"
            cat source_code.txt
            
  windows_test:
    name: Test windows
    runs-on: windows-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v4
        
      - name: Create Variables
        run: |
          # read version from file
          Get-ChildItem
          
          $version = Get-Content version
          $buildRev = "${{ github.run_number }}"
          $env:MIDEYE_VERSION = $version
          $env:BUILD_REV      = $buildRev
          $env:DIST           = "windows"
          $env:ARCH           = "x86_64"

          # Export all to GITHUB_ENV
          echo "MIDEYE_VERSION=$version" | Out-File -FilePath $env:GITHUB_ENV -Append
          echo "DIST=$($env:DIST)" | Out-File -FilePath $env:GITHUB_ENV -Append
          echo "ARCH=$($env:ARCH)" | Out-File -FilePath $env:GITHUB_ENV -Append
          echo "BUILD_REV=$buildRev" | Out-File -FilePath $env:GITHUB_ENV -Append


      - name: Print variables
        run: |
          Write-Host "MIDEYE_VERSION: $env:MIDEYE_VERSION"
          Write-Host "BUILD_REV: $env:BUILD_REV"
          echo "MIDEYE_VERSION: ${{ env.MIDEYE_VERSION }}"

  front_test:
    name: Frontend Test
    runs-on: ubuntu-latest
    steps:
      - name: Run front test
        run: echo "Running front tests..."
      - name: Simulate success
        run: echo "Frontend tests passed!"

  backend_test:
    name: Backend Test
    runs-on: ubuntu-latest
    steps:
      - name: Run backend test
        run: echo "Running backend tests..."
      - name: Simulate success
        run: echo "Backend tests passed!"

  determine_build:
    name: Determine if Build Should Run
    runs-on: ubuntu-latest
    needs: front_test
    outputs:
      should_run_build: ${{ steps.check_build.outputs.should_run }}
    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Extract Commit Message
        id: get_commits
        run: |
          # Extract the latest commit message
          commit_message=$(git log -1 --pretty=%B)
          echo "commit_message=$commit_message" >> $GITHUB_OUTPUT

      - name: Check for Packaging Keywords
        id: check_build
        run: |
          commit_message="${{ steps.get_commits.outputs.commit_message }}"
          # Convert to lowercase for case-insensitive comparison
          commit_message_lower=$(echo "$commit_message" | tr '[:upper:]' '[:lower:]')
          
          echo "Commit message: $commit_message_lower"
          
          # Check for keywords
          if [[ "$commit_message_lower" == *"final"* ]] || [[ "$commit_message_lower" == *"beta"* ]] || [[ "$commit_message_lower" == *"package"* ]]; then
            echo "should_run=true" >> $GITHUB_OUTPUT
          else
            echo "should_run=false" >> $GITHUB_OUTPUT
          fi
        
