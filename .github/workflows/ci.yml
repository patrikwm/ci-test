---
name: CI Pipeline name

on:
  push:
    branches:
      - '**'
  pull_request:
    branches:
      - '**'

jobs:
  variable_test:
    name: Variable Test
    runs-on: ubuntu-latest

    env:
        VARIABLE_ONE: value_one
    steps:
      - uses: actions/checkout@v4

      - name: Echo variables
        run: |
            echo "NEW_VARIABLE=NEW_VARIABLE_VALUE" >> $GITHUB_ENV
            export PRIVATE_VARIABLE=PRIVATE_VARIABLE_VALUE

            # This works
            echo $VARIABLE_ONE 

            # This does not work
            echo "NEW_VARIABLE: $NEW_VARIABLE"
            echo "env.NEW_VARIABLE: ${{ env.NEW_VARIABLE }}"
            
            # This works
            echo $PRIVATE_VARIABLE 
            cat source_code.txt

      - name: Echo previous variables
        run: |
            echo "env.NEW_VARIABLE: ${{ env.NEW_VARIABLE }}"
            echo "VARIABLE_ONE: $VARIABLE_ONE"
            echo "NEW_VARIABLE: $NEW_VARIABLE"
            echo "PRIVATE_VARIABLE: $PRIVATE_VARIABLE"
            cat source_code.txt
            
  windows_test:
    name: Test windows
    runs-on: windows-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v4
        
      - name: Create Variables
        run: |
          # read version from file
          Get-ChildItem
          
          $version = Get-Content version
          $buildRev = "${{ github.run_number }}"
          $env:MIDEYE_VERSION = $version
          $env:BUILD_REV      = $buildRev
          $env:DIST           = "windows"
          $env:ARCH           = "x86_64"

          # Export all to GITHUB_ENV
          echo "MIDEYE_VERSION=$version" | Out-File -FilePath $env:GITHUB_ENV -Append
          echo "DIST=$($env:DIST)" | Out-File -FilePath $env:GITHUB_ENV -Append
          echo "ARCH=$($env:ARCH)" | Out-File -FilePath $env:GITHUB_ENV -Append
          echo "BUILD_REV=$buildRev" | Out-File -FilePath $env:GITHUB_ENV -Append


      - name: Print variables
        run: |
          Write-Host "MIDEYE_VERSION: $env:MIDEYE_VERSION"
          Write-Host "BUILD_REV: $env:BUILD_REV"
          echo "MIDEYE_VERSION: ${{ env.MIDEYE_VERSION }}"

  front_test:
    name: Frontend Test
    runs-on: ubuntu-latest
    steps:
      - name: Run front test
        run: echo "Running front tests..."
      - name: Simulate success
        run: echo "Frontend tests passed!"

  backend_test:
    name: Backend Test
    runs-on: ubuntu-latest
    steps:
      - name: Run backend test
        run: echo "Running backend tests..."
      - name: Simulate success
        run: echo "Backend tests passed!"

  approval:
    name: Approval for Build
    runs-on: ubuntu-latest
    needs: [front_test, backend_test] # Only run after tests pass
    steps:
      - name: Request manual approval
        uses: peter-evans/approve-pull-request@v5
        with:
          pull-request-number: ${{ github.event.pull_request.number }}
          body: "Tests have passed. Please approve to start the build."


        
        
